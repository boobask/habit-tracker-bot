import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.combined import AndTrigger
from apscheduler.triggers.cron import CronTrigger
from datetime import time
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('habits.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS habits (
            user_id INTEGER,
            habit_name TEXT,
            streak INTEGER DEFAULT 0,
            reminder_days TEXT,  # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "mon,wed,fri")
            reminder_time TEXT,   # –í—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "09:00")
            PRIMARY KEY (user_id, habit_name)
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
def add_habit(user_id, habit_name, reminder_days=None, reminder_time=None):
    conn = sqlite3.connect('habits.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO habits (user_id, habit_name, reminder_days, reminder_time)
        VALUES (?, ?, ?, ?)
    ''', (user_id, habit_name, reminder_days, reminder_time))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
def get_habits_with_reminders():
    conn = sqlite3.connect('habits.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, habit_name, reminder_days, reminder_time FROM habits WHERE reminder_days IS NOT NULL')
    habits = cursor.fetchall()
    conn.close()
    return habits

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def schedule_reminders(context: CallbackContext):
    habits = get_habits_with_reminders()
    for user_id, habit_name, reminder_days, reminder_time in habits:
        days = [day.strip() for day in reminder_days.split(",")]
        hour, minute = map(int, reminder_time.split(":"))
        
        for day in days:
            trigger = CronTrigger(
                day_of_week=day,
                hour=hour,
                minute=minute,
                timezone=pytz.timezone('Europe/Moscow')  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É
            )
            context.job_queue.run_once(
                callback=lambda ctx: send_reminder(ctx, user_id, habit_name),
                when=trigger,
                name=f"{user_id}_{habit_name}_{day}"
            )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_reminder(context: CallbackContext, user_id: int, habit_name: str):
    context.bot.send_message(
        chat_id=user_id,
        text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É '{habit_name}'!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
def add(update: Update, context: CallbackContext):
    update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    return "GET_HABIT_NAME"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
def get_habit_name(update: Update, context: CallbackContext):
    habit_name = update.message.text
    context.user_data['habit_name'] = habit_name
    update.message.reply_text(
        "üìÖ –í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: mon,wed,fri)\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: mon, tue, wed, thu, fri, sat, sun"
    )
    return "GET_REMINDER_DAYS"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def get_reminder_days(update: Update, context: CallbackContext):
    days_input = update.message.text.lower()
    valid_days = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
    days = [day.strip() for day in days_input.split(",")]
    
    if not all(day in valid_days for day in days):
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return "GET_REMINDER_DAYS"
    
    context.user_data['reminder_days'] = days_input
    update.message.reply_text("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (–§–æ—Ä–º–∞—Ç: HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00)")
    return "GET_REMINDER_TIME"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_reminder_time(update: Update, context: CallbackContext):
    time_input = update.message.text
    try:
        hour, minute = map(int, time_input.split(":"))
        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return "GET_REMINDER_TIME"
    
    habit_name = context.user_data['habit_name']
    reminder_days = context.user_data['reminder_days']
    reminder_time = time_input
    
    add_habit(update.effective_user.id, habit_name, reminder_days, reminder_time)
    update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_days} –≤ {reminder_time}"
    )
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    schedule_reminders(context)
    return -1

def main():
    init_db()
    updater = Updater(7123542145:AAEGrZPSzbYgVhJihw4dzvsFw5iq6oWTrdo, use_context=True)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add))
    dp.add_handler(CommandHandler("list", list_habits))
    dp.add_handler(CommandHandler("remove", remove))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, get_habit_name), group=1)
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, get_reminder_days), group=2)
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, get_reminder_time), group=3)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button_click, pattern="^complete_"))
    dp.add_handler(CallbackQueryHandler(remove_habit_handler, pattern="^remove_"))

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    updater.job_queue.run_once(schedule_reminders, when=0)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
